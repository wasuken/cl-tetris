(defpackage cl-tetris/tests/main
  (:use :cl
        :cl-tetris
        :rove))
(in-package :cl-tetris/tests/main)

;; NOTE: To run this test file, execute `(asdf:test-system :cl-tetris)' in your Lisp.

(defparameter *test-map* (cl-tetris:gen-map))

(deftest replace-map-test
	(testing "replace-map test pattern to succeed"
			 (ok (equal '((1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 0 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1))
						(replace-map *test-map* 1 4 0))))
  (testing "replace-map test out of index(no change)"
		   (ok (equal '((1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1))
					  (replace-map *test-map* 100 200 0)))
		   (ok (equal '((1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1)
						(1 1 1 1 1 1 1 1 1 1))
					  (replace-map *test-map* 11 21 0))))
  )

(deftest put-block-test
	(testing "put-block test pattern to succeed"
			 (ok (equal '((1 1 1 1 0 1 1 1 1 1)
						  (1 1 1 1 0 0 1 1 1 1)
						  (1 1 1 1 0 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1))
						(put-block *test-map*
											 '((1 1 1 1) (1 0 1 1) (1 0 0 1) (1 0 1 1)))))))

(deftest check-apl-test
	(testing "check-apl test pattern to succeed"
			 (ok (check-apl (gen-map) '(1) '((1 . 2) (2 . 2) (3 . 2)))))
  (testing "check-apl test pattern to failed"
		   (ng (check-apl (gen-map) '(1) '((1 . 2) (21 . 2) (3 . 2))))
		   (ng (check-apl (gen-map) '(1) '((1 . 2) (1 . 11) (3 . 2))))))

(deftest update-map-test
	(testing "update-map test pattern to succeed"
			 (ok (equal '((2 1 1 1 1 1 1 1 1 1)
						  (2 1 1 1 1 1 1 1 1 1)
						  (2 1 1 1 1 1 1 1 1 1)
						  (2 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1))
						(update-map (gen-map) '((0 . 0) (1 . 0) (2 . 0) (3 . 0)) 2)))
			 (ok (equal '((1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (2 1 1 1 1 1 1 1 1 1))
						(update-map (gen-map) '((19 . 0) (20 . 0) (21 . 0) (22 . 0)) 2)))
			 (ok (equal '((1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (1 1 1 1 1 1 1 1 1 1)
						  (2 1 1 1 1 1 1 1 1 1)
						  (2 1 1 1 1 1 1 1 1 1))
						(update-map (gen-map) '((19 . 0) (20 . 0) (21 . 0) (18 . 0)) 2)))))
